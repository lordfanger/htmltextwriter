// (c) 2019 Max Feingold

using System.Collections.Generic;
using System.Linq;

namespace System.Web.UI
{
    public enum HtmlTextWriterTag
    {
        Unknown = 0,
        A = 1,
        Acronym = 2,
        Address = 3,
        Area = 4,
        B = 5,
        Base = 6,
        Basefont = 7,
        Bdo = 8,
        Bgsound = 9,
        Big = 10,
        Blockquote = 11,
        Body = 12,
        Br = 13,
        Button = 14,
        Caption = 15,
        Center = 16,
        Cite = 17,
        Code = 18,
        Col = 19,
        Colgroup = 20,
        Dd = 21,
        Del = 22,
        Dfn = 23,
        Dir = 24,
        Div = 25,
        Dl = 26,
        Dt = 27,
        Em = 28,
        Embed = 29,
        Fieldset = 30,
        Font = 31,
        Form = 32,
        Frame = 33,
        Frameset = 34,
        H1 = 35,
        H2 = 36,
        H3 = 37,
        H4 = 38,
        H5 = 39,
        H6 = 40,
        Head = 41,
        Hr = 42,
        Html = 43,
        I = 44,
        Iframe = 45,
        Img = 46,
        Input = 47,
        Ins = 48,
        Isindex = 49,
        Kbd = 50,
        Label = 51,
        Legend = 52,
        Li = 53,
        Link = 54,
        Map = 55,
        Marquee = 56,
        Menu = 57,
        Meta = 58,
        Nobr = 59,
        Noframes = 60,
        Noscript = 61,
        Object = 62,
        Ol = 63,
        Option = 64,
        P = 65,
        Param = 66,
        Pre = 67,
        Q = 68,
        Rt = 69,
        Ruby = 70,
        S = 71,
        Samp = 72,
        Script = 73,
        Select = 74,
        Small = 75,
        Span = 76,
        Strike = 77,
        Strong = 78,
        Style = 79,
        Sub = 80,
        Sup = 81,
        Table = 82,
        Tbody = 83,
        Td = 84,
        Textarea = 85,
        Tfoot = 86,
        Th = 87,
        Thead = 88,
        Title = 89,
        Tr = 90,
        Tt = 91,
        U = 92,
        Ul = 93,
        Var = 94,
        Wbr = 95,
        Xml = 96
    }

    static class HtmlTextWriterTagExtensions
    {
        static readonly Dictionary<HtmlTextWriterTag, TagMetadata> s_tags = new()
        {
            { HtmlTextWriterTag.A, new("a", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Acronym, new("acronym", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Address, new("address", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Area, new("area", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.B, new("b", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Base, new("base", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Basefont, new("basefont", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Bdo, new("bdo", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Bgsound, new("bgsound", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Big, new("big", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Blockquote, new("blockquote", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Body, new("body", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Br, new("br", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Button, new("button", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Caption, new("caption", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Center, new("center", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Cite, new("cite", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Code, new("code", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Col, new("col", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Colgroup, new("colgroup", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Dd, new("dd", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Del, new("del", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Dfn, new("dfn", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Dir, new("dir", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Div, new("div", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Dl, new("dl", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Dt, new("dt", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Em, new("em", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Embed, new("embed", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Fieldset, new("fieldset", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Font, new("font", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Form, new("form", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Frame, new("frame", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Frameset, new("frameset", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H1, new("h1", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H2, new("h2", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H3, new("h3", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H4, new("h4", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H5, new("h5", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.H6, new("h6", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Head, new("head", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Hr, new("hr", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Html, new("html", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.I, new("i", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Iframe, new("iframe", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Img, new("img", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Input, new("input", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Ins, new("ins", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Isindex, new("isindex", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Kbd, new("kbd", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Label, new("label", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Legend, new("legend", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Li, new("li", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Link, new("link", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Map, new("map", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Marquee, new("marquee", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Menu, new("menu", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Meta, new("meta", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Nobr, new("nobr", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Noframes, new("noframes", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Noscript, new("noscript", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Object, new("object", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Ol, new("ol", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Option, new("option", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.P, new("p", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Param, new("param", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Pre, new("pre", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Q, new("q", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Rt, new("rt", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Ruby, new("ruby", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.S, new("s", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Samp, new("samp", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Script, new("script", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Select, new("select", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Small, new("small", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Span, new("span", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Strike, new("strike", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Strong, new("strong", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Style, new("style", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Sub, new("sub", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Sup, new("sup", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Table, new("table", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Tbody, new("tbody", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Td, new("td", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Textarea, new("textarea", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Tfoot, new("tfoot", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Th, new("th", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Thead, new("thead", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Title, new("title", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Tr, new("tr", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Tt, new("tt", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.U, new("u", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Ul, new("ul", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
            { HtmlTextWriterTag.Var, new("var", BeginTagBehavior.OpenTag, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Wbr, new("wbr", BeginTagBehavior.SelfClose, BeginTagIndentBehavior.NoIndent) },
            { HtmlTextWriterTag.Xml, new("xml", BeginTagBehavior.OpenTagWithLineBreak, BeginTagIndentBehavior.Indent) },
        };

        static readonly Dictionary<string, TagMetadata> s_names = s_tags.Values.ToDictionary(b => b.Name, b => b);
        public static bool IsKnownTag(this string name) => s_names.ContainsKey(name);
        public static TagMetadata ToMetadata(this string name) => s_names.TryGetValue(name, out TagMetadata metadata) ? metadata : new(name, BeginTagBehavior.Default, BeginTagIndentBehavior.Default);

        public static TagMetadata ToMetadata(this HtmlTextWriterTag tag) => s_tags[tag];
    }

    class TagMetadata(string name, BeginTagBehavior openBehavior, BeginTagIndentBehavior indentBehavior)
    {
        public string Name { get; } = name;
        public BeginTagBehavior OpenBehavior { get; } = openBehavior;
        public BeginTagIndentBehavior IndentBehavior { get; } = indentBehavior;
    }

    enum BeginTagBehavior
    {
        OpenTag,
        OpenTagWithLineBreak,
        SelfClose,
        Default = OpenTagWithLineBreak,
    }

    enum BeginTagIndentBehavior
    {
        Indent,
        NoIndent,
        Default = Indent,
    }
}
